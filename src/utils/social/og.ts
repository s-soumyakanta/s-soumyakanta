import { Base64 } from 'js-base64';

// Utility function to remove emojis from a string
const stripEmojis = (str: string): string =>
	str
		.replace(
			/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,
			'',
		)
		.replace(/\s+/g, ' ')
		.trim();

// Define the structure of a Post
interface Post {
	title: string;
	readTimeInMinutes?: number;
	reactionCount?: number;
	responseCount?: number;
	author?: {
		name: string;
		profilePicture?: string;
	};
}

// Define the structure of a Publication
interface Publication {
	url: string;
	title?: string;
	isTeam?: boolean;
	favicon?: string;
	author?: {
		name: string;
		profilePicture?: string;
		followersCount?: number;
	};
	followersCount?: number;
	descriptionSEO?: string;
	posts?: { totalDocuments?: number };
	preferences?: { logo?: string };
}

// Function to generate Open Graph (OG) URL for a post
export const getAutogeneratedPostOG = (post: Post, publication: Publication): string => {
	const { title, readTimeInMinutes, reactionCount = 0, responseCount = 0, author } = post;
	const ogUrl = `${publication.url}/api/og/post`;

	// Use `Record<string, unknown>` to maintain type safety
	const ogData: Record<string, unknown> = {};

	try {
		ogData.title = encodeURIComponent(stripEmojis(title));
		ogData.author = author?.name ? encodeURIComponent(author.name) : 'Unknown';
		ogData.domain = new URL(publication.url).hostname;

		if (author?.profilePicture) {
			ogData.photo = author.profilePicture;
		}

		if (readTimeInMinutes) {
			ogData.readTime = readTimeInMinutes;
		}

		if (reactionCount > 0) {
			ogData.reactions = reactionCount;
		}

		if (responseCount > 0) {
			ogData.comments = responseCount;
		}
	} catch (e) {
		console.error('Error generating post OG:', e);
	}

	return `${ogUrl}?og=${Base64.encode(JSON.stringify(ogData))}`;
};

// Function to generate Open Graph (OG) URL for a publication
export const getAutogeneratedPublicationOG = (publication: Publication): string => {
	const { title, isTeam, favicon, author, followersCount, descriptionSEO } = publication;
	const totalDocuments = publication.posts?.totalDocuments;
	const logo = publication.preferences?.logo;

	const ogUrl = `${publication.url}/api/og/home`;
	const ogData: Record<string, unknown> = {};

	try {
		ogData.title = title
			? encodeURIComponent(stripEmojis(title))
			: `${author?.name || 'Unknown'}'s ${isTeam ? 'team' : ''} blog`;

		ogData.domain = new URL(publication.url).hostname;
		ogData.followers = isTeam ? followersCount : author?.followersCount;

		if (author?.profilePicture && !isTeam) {
			ogData.photo = author.profilePicture;
		}

		if (logo) {
			ogData.logo = logo;
		}

		if (isTeam) {
			ogData.isTeam = isTeam;
		}

		if (descriptionSEO) {
			ogData.meta = encodeURIComponent(stripEmojis(descriptionSEO));
		}

		if (favicon) {
			ogData.favicon = favicon;
		}

		if (totalDocuments && totalDocuments > 0) {
			ogData.articles = totalDocuments;
		}
	} catch (e) {
		console.error('Error generating publication OG:', e);
	}

	return `${ogUrl}?og=${Base64.encode(JSON.stringify(ogData))}`;
};
