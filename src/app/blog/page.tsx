import { addPublicationJsonLd } from '@/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@/utils/social/og';
import request from 'graphql-request';
import { Metadata } from 'next';

import {
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
} from '@/generated/graphql';
import BlogHome from './blog-home';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

export async function generateMetadata(): Promise<Metadata> {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 10,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;

	return {
		title: publication?.displayTitle || publication?.title || 'Hashnode Blog Starter Kit',
		description:
			publication?.descriptionSEO || publication?.title || `${publication?.author.name}'s Blog`,
		openGraph: {
			images: [publication?.ogMetaData.image || getAutogeneratedPublicationOG(publication)],
		},
		twitter: {
			card: 'summary_large_image',
			title: publication?.displayTitle || publication?.title || 'Hashnode Blog Starter Kit',
			description:
				publication?.descriptionSEO || publication?.title || `${publication?.author.name}'s Blog`,
			images: [publication?.ogMetaData.image || getAutogeneratedPublicationOG(publication)],
		},
	};
}

export default async function BlogPage() {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 10,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	if (!data.publication) {
		return <div>Not Found</div>;
	}

	const publication = data.publication;
	const initialAllPosts = publication.posts.edges.map((edge) => edge.node);

	return (
		<BlogHome
			publication={publication}
			initialAllPosts={initialAllPosts}
			initialPageInfo={publication.posts.pageInfo}
		/>
	);
}
